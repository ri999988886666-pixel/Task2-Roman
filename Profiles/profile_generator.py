import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import json
import os
from datetime import datetime
import markdown

class ProfileGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("üë§ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ê–Ω–∫–µ—Ç - Profile Manager")
        self.root.geometry("800x700")
        
        self.profiles_dir = "profiles"
        if not os.path.exists(self.profiles_dir):
            os.makedirs(self.profiles_dir)
            
        self.setup_ui()
        
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=60)
        title_frame.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Label(
            title_frame, 
            text="üë§ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ê–Ω–∫–µ—Ç", 
            font=('Arial', 14, 'bold'),
            fg='white',
            bg='#2c3e50'
        ).pack(expand=True)
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.setup_personal_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ù–∞–≤—ã–∫–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        self.setup_skills_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ü—Ä–æ–µ–∫—Ç—ã –∏ –æ–ø—ã—Ç
        self.setup_projects_tab()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_controls()
    
    def setup_personal_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        tab1 = ttk.Frame(self.notebook)
        self.notebook.add(tab1, text="üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        fields = [
            ("–§–ò–û:", "full_name"),
            ("–î–æ–ª–∂–Ω–æ—Å—Ç—å:", "position"),
            ("Email:", "email"),
            ("–¢–µ–ª–µ—Ñ–æ–Ω:", "phone"),
            ("–ì–æ—Ä–æ–¥:", "city"),
            ("GitHub:", "github"),
            ("Telegram:", "telegram")
        ]
        
        self.entries = {}
        
        for i, (label, key) in enumerate(fields):
            frame = tk.Frame(tab1)
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=label, width=12, anchor='w').pack(side=tk.LEFT)
            entry = tk.Entry(frame)
            entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
            self.entries[key] = entry
        
        # –û —Å–µ–±–µ
        about_frame = tk.Frame(tab1)
        about_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        tk.Label(about_frame, text="–û —Å–µ–±–µ:", anchor='w').pack(fill=tk.X)
        self.about_text = scrolledtext.ScrolledText(about_frame, height=8)
        self.about_text.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
    
    def setup_skills_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–≤—ã–∫–æ–≤"""
        tab2 = ttk.Frame(self.notebook)
        self.notebook.add(tab2, text="üõ†Ô∏è –ù–∞–≤—ã–∫–∏")
        
        # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        prog_frame = tk.Frame(tab2)
        prog_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(prog_frame, text="–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", anchor='w').pack(fill=tk.X)
        self.prog_langs_text = scrolledtext.ScrolledText(prog_frame, height=4)
        self.prog_langs_text.pack(fill=tk.X, pady=(5, 0))
        
        # –§—Ä–µ–π–º–≤–æ—Ä–∫–∏
        frameworks_frame = tk.Frame(tab2)
        frameworks_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(frameworks_frame, text="–§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:", anchor='w').pack(fill=tk.X)
        self.frameworks_text = scrolledtext.ScrolledText(frameworks_frame, height=4)
        self.frameworks_text.pack(fill=tk.X, pady=(5, 0))
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_frame = tk.Frame(tab2)
        tools_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(tools_frame, text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:", anchor='w').pack(fill=tk.X)
        self.tools_text = scrolledtext.ScrolledText(tools_frame, height=3)
        self.tools_text.pack(fill=tk.X, pady=(5, 0))
        
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        education_frame = tk.Frame(tab2)
        education_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(education_frame, text="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:", anchor='w').pack(fill=tk.X)
        self.education_text = scrolledtext.ScrolledText(education_frame, height=4)
        self.education_text.pack(fill=tk.X, pady=(5, 0))
    
    def setup_projects_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        tab3 = ttk.Frame(self.notebook)
        self.notebook.add(tab3, text="üíº –ü—Ä–æ–µ–∫—Ç—ã")
        
        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        experience_frame = tk.Frame(tab3)
        experience_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(experience_frame, text="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:", anchor='w').pack(fill=tk.X)
        self.experience_text = scrolledtext.ScrolledText(experience_frame, height=6)
        self.experience_text.pack(fill=tk.X, pady=(5, 0))
        
        # –ü—Ä–æ–µ–∫—Ç—ã
        projects_frame = tk.Frame(tab3)
        projects_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(projects_frame, text="–ü—Ä–æ–µ–∫—Ç—ã:", anchor='w').pack(fill=tk.X)
        self.projects_text = scrolledtext.ScrolledText(projects_frame, height=6)
        self.projects_text.pack(fill=tk.X, pady=(5, 0))
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_frame = tk.Frame(tab3)
        achievements_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(achievements_frame, text="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", anchor='w').pack(fill=tk.X)
        self.achievements_text = scrolledtext.ScrolledText(achievements_frame, height=4)
        self.achievements_text.pack(fill=tk.X, pady=(5, 0))
    
    def setup_controls(self):
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        controls_frame = tk.Frame(self.root)
        controls_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Button(
            controls_frame, 
            text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", 
            command=self.clear_all
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        tk.Button(
            controls_frame, 
            text="üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", 
            command=self.preview_profile
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        tk.Button(
            controls_frame, 
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", 
            command=self.save_profile,
            bg='#27ae60',
            fg='white'
        ).pack(side=tk.LEFT)
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è"""
        for entry in self.entries.values():
            entry.delete(0, tk.END)
        
        self.about_text.delete('1.0', tk.END)
        self.prog_langs_text.delete('1.0', tk.END)
        self.frameworks_text.delete('1.0', tk.END)
        self.tools_text.delete('1.0', tk.END)
        self.education_text.delete('1.0', tk.END)
        self.experience_text.delete('1.0', tk.END)
        self.projects_text.delete('1.0', tk.END)
        self.achievements_text.delete('1.0', tk.END)
    
    def generate_profile_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã"""
        return {
            "personal": {
                "full_name": self.entries['full_name'].get(),
                "position": self.entries['position'].get(),
                "email": self.entries['email'].get(),
                "phone": self.entries['phone'].get(),
                "city": self.entries['city'].get(),
                "github": self.entries['github'].get(),
                "telegram": self.entries['telegram'].get(),
                "about": self.about_text.get('1.0', tk.END).strip()
            },
            "skills": {
                "programming_languages": self.prog_langs_text.get('1.0', tk.END).strip(),
                "frameworks": self.frameworks_text.get('1.0', tk.END).strip(),
                "tools": self.tools_text.get('1.0', tk.END).strip(),
                "education": self.education_text.get('1.0', tk.END).strip()
            },
            "projects": {
                "experience": self.experience_text.get('1.0', tk.END).strip(),
                "projects": self.projects_text.get('1.0', tk.END).strip(),
                "achievements": self.achievements_text.get('1.0', tk.END).strip()
            },
            "meta": {
                "created": datetime.now().strftime("%d.%m.%Y %H:%M"),
                "version": "1.0"
            }
        }
    
    def generate_markdown(self, profile_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        personal = profile_data['personal']
        skills = profile_data['skills']
        projects = profile_data['projects']
        
        markdown_content = f"""# üëã –ü—Ä–∏–≤–µ—Ç! –Ø {personal['full_name'] or '–ò–º—è –§–∞–º–∏–ª–∏—è'}

## üöÄ {personal['position'] or '–î–æ–ª–∂–Ω–æ—Å—Ç—å'}
üìç {personal['city'] or '–ì–æ—Ä–æ–¥'}

{personal['about'] or '*–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ*'}

## üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã:
- üìß **Email:** {personal['email'] or 'email@example.com'}
- üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {personal['phone'] or '+7 XXX XXX-XX-XX'}
- üíº **GitHub:** [{personal['github'] or 'username'}](https://github.com/{personal['github'] or 'username'})
- üì¢ **Telegram:** {personal['telegram'] or '@username'}

## üõ†Ô∏è –ù–∞–≤—ã–∫–∏:

### –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:
{self.format_text(skills['programming_languages'])}

### –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
{self.format_text(skills['frameworks'])}

### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
{self.format_text(skills['tools'])}

## üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
{self.format_text(skills['education'])}

## üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
{self.format_text(projects['experience'])}

## üéØ –ü—Ä–æ–µ–∫—Ç—ã:
{self.format_text(projects['projects'])}

## üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
{self.format_text(projects['achievements'])}

---

*–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ {datetime.now().strftime('%d.%m.%Y')} —Å –ø–æ–º–æ—â—å—é Profile Manager*"""
        
        return markdown_content
    
    def format_text(self, text, prefix="- "):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫"""
        if not text.strip():
            return f"{prefix}–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        lines = text.strip().split('\n')
        formatted_lines = [f"{prefix}{line.strip()}" for line in lines if line.strip()]
        return '\n'.join(formatted_lines)
    
    def preview_profile(self):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã"""
        profile_data = self.generate_profile_data()
        markdown_content = self.generate_markdown(profile_data)
        
        preview_window = tk.Toplevel(self.root)
        preview_window.title("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã")
        preview_window.geometry("600x500")
        
        text_widget = scrolledtext.ScrolledText(preview_window, wrap=tk.WORD, font=('Courier New', 10))
        text_widget.insert(tk.END, markdown_content)
        
        scrollbar = tk.Scrollbar(preview_window, command=text_widget.yview)
        text_widget.config(yscrollcommand=scrollbar.set)
        
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    
    def save_profile(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
        if not self.entries['full_name'].get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û!")
            return
        
        profile_data = self.generate_profile_data()
        markdown_content = self.generate_markdown(profile_data)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"profile_{self.entries['full_name'].get().replace(' ', '_')}_{timestamp}.md"
        filepath = os.path.join(self.profiles_dir, filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è
            json_filename = f"profile_{self.entries['full_name'].get().replace(' ', '_')}_{timestamp}.json"
            json_filepath = os.path.join(self.profiles_dir, json_filename)
            
            with open(json_filepath, 'w', encoding='utf-8') as f:
                json.dump(profile_data, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nMarkdown: {filename}\nJSON: {json_filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

def main():
    root = tk.Tk()
    app = ProfileGenerator(root)
    root.mainloop()

if __name__ == "__main__":
    main()