import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import json
import os
import glob
from datetime import datetime

class ProfileViewer:
    def __init__(self, root):
        self.root = root
        self.root.title("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç - Profile Manager")
        self.root.geometry("900x600")
        
        self.profiles_dir = "profiles"
        self.setup_ui()
        self.load_profiles()
    
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=60)
        title_frame.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Label(
            title_frame, 
            text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", 
            font=('Arial', 14, 'bold'),
            fg='white',
            bg='#2c3e50'
        ).pack(expand=True)
        
        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        search_frame = tk.Frame(self.root)
        search_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(search_frame, text="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏:").pack(side=tk.LEFT)
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(search_frame, textvariable=self.search_var, width=30)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        self.search_entry.bind('<KeyRelease>', self.on_search)
        
        tk.Label(search_frame, text="–¢–∏–ø —Ñ–∞–π–ª–∞:").pack(side=tk.LEFT, padx=(20, 0))
        self.file_type_var = tk.StringVar(value="–í—Å–µ")
        file_type_combo = ttk.Combobox(search_frame, textvariable=self.file_type_var, 
                                     values=["–í—Å–µ", "Markdown", "JSON"])
        file_type_combo.pack(side=tk.LEFT, padx=5)
        file_type_combo.bind('<<ComboboxSelected>>', self.on_search)
        
        tk.Button(search_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.load_profiles).pack(side=tk.RIGHT)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
        left_frame = tk.Frame(main_container)
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        tk.Label(left_frame, text="–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç:", font=('Arial', 11, 'bold')).pack(anchor='w')
        
        self.tree = ttk.Treeview(left_frame, columns=('–ò–º—è', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–î–∞—Ç–∞'), show='headings', height=15)
        self.tree.heading('–ò–º—è', text='–ò–º—è')
        self.tree.heading('–î–æ–ª–∂–Ω–æ—Å—Ç—å', text='–î–æ–ª–∂–Ω–æ—Å—Ç—å')
        self.tree.heading('–î–∞—Ç–∞', text='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        
        self.tree.column('–ò–º—è', width=150)
        self.tree.column('–î–æ–ª–∂–Ω–æ—Å—Ç—å', width=120)
        self.tree.column('–î–∞—Ç–∞', width=120)
        
        scrollbar_tree = ttk.Scrollbar(left_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar_tree.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_tree.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.bind('<<TreeviewSelect>>', self.on_profile_select)
        
        # –î–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã
        right_frame = tk.Frame(main_container)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.view_notebook = ttk.Notebook(right_frame)
        self.view_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ Markdown
        md_frame = ttk.Frame(self.view_notebook)
        self.view_notebook.add(md_frame, text="Markdown")
        
        self.md_text = scrolledtext.ScrolledText(md_frame, wrap=tk.WORD, font=('Courier New', 9))
        self.md_text.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ JSON
        json_frame = ttk.Frame(self.view_notebook)
        self.view_notebook.add(json_frame, text="JSON")
        
        self.json_text = scrolledtext.ScrolledText(json_frame, wrap=tk.WORD, font=('Courier New', 9))
        self.json_text.pack(fill=tk.BOTH, expand=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = tk.Label(self.root, text="–ó–∞–≥—Ä—É–∑–∫–∞...", font=('Arial', 9))
        self.stats_label.pack(fill=tk.X, padx=20, pady=5)
    
    def load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        if not os.path.exists(self.profiles_dir):
            self.stats_label.config(text="–ü–∞–ø–∫–∞ —Å –∞–Ω–∫–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        search_term = self.search_var.get().lower()
        file_type_filter = self.file_type_var.get()
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã
        all_files = []
        if file_type_filter in ["–í—Å–µ", "Markdown"]:
            all_files.extend(glob.glob(os.path.join(self.profiles_dir, "*.md")))
        if file_type_filter in ["–í—Å–µ", "JSON"]:
            all_files.extend(glob.glob(os.path.join(self.profiles_dir, "*.json")))
        
        valid_profiles = 0
        
        for filepath in all_files:
            try:
                filename = os.path.basename(filepath)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
                if search_term and search_term not in filename.lower():
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∫–µ—Ç–µ
                profile_info = self.get_profile_info(filepath)
                if profile_info:
                    self.tree.insert('', 'end', 
                                   values=(profile_info['name'], 
                                         profile_info['position'],
                                         profile_info['date']),
                                   tags=(filepath, profile_info['type']))
                    
                    valid_profiles += 1
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        
        self.stats_label.config(text=f"–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç: {valid_profiles}")
    
    def get_profile_info(self, filepath):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∫–µ—Ç–µ"""
        filename = os.path.basename(filepath)
        file_ext = os.path.splitext(filename)[1]
        
        try:
            if file_ext == '.json':
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                return {
                    'name': data['personal']['full_name'],
                    'position': data['personal']['position'],
                    'date': data['meta']['created'],
                    'type': 'JSON'
                }
            
            elif file_ext == '.md':
                # –î–ª—è MD —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–º–µ–Ω–∏
                with open(filepath, 'r', encoding='utf-8') as f:
                    first_line = f.readline().strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "# üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–º—è –§–∞–º–∏–ª–∏—è"
                name = first_line.replace('# üëã –ü—Ä–∏–≤–µ—Ç! –Ø ', '').strip()
                
                stats = os.stat(filepath)
                date_str = datetime.fromtimestamp(stats.st_ctime).strftime('%d.%m.%Y %H:%M')
                
                return {
                    'name': name,
                    'position': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'date': date_str,
                    'type': 'Markdown'
                }
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
            return None
    
    def on_search(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.load_profiles()
    
    def on_profile_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–∫–µ—Ç—ã"""
        selection = self.tree.selection()
        if not selection:
            return
        
        item = selection[0]
        filepath = self.tree.item(item, 'tags')[0]
        file_type = self.tree.item(item, 'tags')[1]
        
        try:
            if file_type == 'JSON':
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.json_text.delete('1.0', tk.END)
                self.json_text.insert('1.0', json.dumps(data, indent=2, ensure_ascii=False))
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown –∏–∑ JSON
                markdown_content = self.json_to_markdown(data)
                self.md_text.delete('1.0', tk.END)
                self.md_text.insert('1.0', markdown_content)
                
            else:  # Markdown
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                self.md_text.delete('1.0', tk.END)
                self.md_text.insert('1.0', content)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π JSON —Ñ–∞–π–ª
                json_filepath = filepath.replace('.md', '.json')
                if os.path.exists(json_filepath):
                    with open(json_filepath, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    self.json_text.delete('1.0', tk.END)
                    self.json_text.insert('1.0', json.dumps(data, indent=2, ensure_ascii=False))
                else:
                    self.json_text.delete('1.0', tk.END)
                    self.json_text.insert('1.0', "JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            self.md_text.delete('1.0', tk.END)
            self.md_text.insert('1.0', f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            self.json_text.delete('1.0', tk.END)
            self.json_text.insert('1.0', f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    def json_to_markdown(self, data):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JSON –≤ Markdown"""
        personal = data['personal']
        skills = data['skills']
        projects = data['projects']
        
        markdown_content = f"""# üëã –ü—Ä–∏–≤–µ—Ç! –Ø {personal['full_name']}

## üöÄ {personal['position']}
üìç {personal['city']}

{personal['about']}

## üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã:
- üìß **Email:** {personal['email']}
- üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {personal['phone']}
- üíº **GitHub:** [{personal['github']}](https://github.com/{personal['github']})
- üì¢ **Telegram:** {personal['telegram']}

## üõ†Ô∏è –ù–∞–≤—ã–∫–∏:

### –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:
{self.format_text_for_display(skills['programming_languages'])}

### –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
{self.format_text_for_display(skills['frameworks'])}

### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
{self.format_text_for_display(skills['tools'])}

## üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
{self.format_text_for_display(skills['education'])}

## üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
{self.format_text_for_display(projects['experience'])}

## üéØ –ü—Ä–æ–µ–∫—Ç—ã:
{self.format_text_for_display(projects['projects'])}

## üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
{self.format_text_for_display(projects['achievements'])}"""
        
        return markdown_content
    
    def format_text_for_display(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not text.strip() or text.strip() == "- –ù–µ —É–∫–∞–∑–∞–Ω–æ":
            return "- –ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        lines = text.strip().split('\n')
        return '\n'.join(lines)

def main():
    root = tk.Tk()
    app = ProfileViewer(root)
    root.mainloop()

if __name__ == "__main__":
    main()